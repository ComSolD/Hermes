# Generated by Django 5.1.5 on 2025-01-29 07:02

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='NBAMatch',
            fields=[
                ('match_ID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('season', models.CharField(max_length=10)),
                ('stage', models.CharField(max_length=20)),
                ('date', models.DateField()),
            ],
            options={
                'verbose_name': 'Матч',
                'verbose_name_plural': 'Матчи',
                'db_table': 'nba_match',
            },
        ),
        migrations.CreateModel(
            name='NBAPlayer',
            fields=[
                ('player_ID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Игрок',
                'verbose_name_plural': 'Игроки',
                'db_table': 'nba_player',
            },
        ),
        migrations.CreateModel(
            name='NBATeam',
            fields=[
                ('team_ID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Команда',
                'verbose_name_plural': 'Команды',
                'db_table': 'nba_team',
            },
        ),
        migrations.CreateModel(
            name='NBAPlayerStat',
            fields=[
                ('stat_ID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('position', models.CharField(max_length=10)),
                ('PTS', models.IntegerField()),
                ('FG', models.IntegerField()),
                ('trying_FG', models.IntegerField()),
                ('three_PT', models.IntegerField()),
                ('attempted_three_PT', models.IntegerField()),
                ('FT', models.IntegerField()),
                ('trying_FT', models.IntegerField()),
                ('OREB', models.IntegerField()),
                ('DREB', models.IntegerField()),
                ('REB', models.IntegerField()),
                ('AST', models.IntegerField()),
                ('STL', models.IntegerField()),
                ('BLK', models.IntegerField()),
                ('turnovers', models.IntegerField()),
                ('PF', models.IntegerField()),
                ('plusMinus', models.IntegerField()),
                ('MIN', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.nbamatch')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.nbaplayer')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.nbateam')),
            ],
            options={
                'verbose_name': 'Статистика грока',
                'verbose_name_plural': 'Статистика игроков',
                'db_table': 'nba_player_stat',
            },
        ),
        migrations.AddField(
            model_name='nbamatch',
            name='team1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_matches', to='nba.nbateam'),
        ),
        migrations.AddField(
            model_name='nbamatch',
            name='team2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_matches', to='nba.nbateam'),
        ),
        migrations.CreateModel(
            name='NBABet',
            fields=[
                ('bet_ID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ML_team1_parlay', models.FloatField(blank=True, null=True)),
                ('ML_team2_parlay', models.FloatField(blank=True, null=True)),
                ('ML_result', models.CharField(blank=True, max_length=36, null=True)),
                ('total', models.FloatField()),
                ('over_total_parlay', models.FloatField(blank=True, null=True)),
                ('under_total_parlay', models.FloatField(blank=True, null=True)),
                ('total_result', models.CharField(blank=True, max_length=10, null=True)),
                ('spread_team1', models.FloatField(blank=True, null=True)),
                ('spread_team1_parlay', models.FloatField(blank=True, null=True)),
                ('spread_team2', models.FloatField(blank=True, null=True)),
                ('spread_team2_parlay', models.FloatField(blank=True, null=True)),
                ('spread_result', models.CharField(blank=True, max_length=36, null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.nbamatch')),
                ('team1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bets_as_team1', to='nba.nbateam')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bets_as_team2', to='nba.nbateam')),
            ],
            options={
                'verbose_name': 'Ставка',
                'verbose_name_plural': 'Ставки',
                'db_table': 'nba_bet',
            },
        ),
        migrations.CreateModel(
            name='NBATeamPtsStat',
            fields=[
                ('team_pts_stat_ID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total', models.IntegerField()),
                ('totalMissed', models.IntegerField()),
                ('total_Q1', models.IntegerField()),
                ('total_Q1Missed', models.IntegerField()),
                ('total_Q2', models.IntegerField()),
                ('total_Q2Missed', models.IntegerField()),
                ('total_Q3', models.IntegerField()),
                ('total_Q3Missed', models.IntegerField()),
                ('total_Q4', models.IntegerField()),
                ('total_Q4Missed', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.nbamatch')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.nbateam')),
            ],
            options={
                'verbose_name': 'Статистика команды по очкам',
                'verbose_name_plural': 'Статистика команд по очкам',
                'db_table': 'nba_team_pts_stat',
            },
        ),
        migrations.CreateModel(
            name='NBATeamStat',
            fields=[
                ('team_stat_ID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('result', models.CharField(max_length=10)),
                ('status', models.CharField(max_length=10)),
                ('FG', models.IntegerField()),
                ('trying_FG', models.IntegerField()),
                ('three_PT', models.IntegerField()),
                ('attempted_three_PT', models.IntegerField()),
                ('FT', models.IntegerField()),
                ('trying_FT', models.IntegerField()),
                ('OREB', models.IntegerField()),
                ('DREB', models.IntegerField()),
                ('REB', models.IntegerField()),
                ('AST', models.IntegerField()),
                ('STL', models.IntegerField()),
                ('BLK', models.IntegerField()),
                ('turnovers', models.IntegerField()),
                ('PF', models.IntegerField()),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.nbamatch')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nba.nbateam')),
            ],
            options={
                'verbose_name': 'Статистика команды',
                'verbose_name_plural': 'Статистика команд',
                'db_table': 'nba_team_stat',
            },
        ),
    ]
